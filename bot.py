import re
import asyncio
import logging
import json
import os
from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel
from telethon.errors import (
    ApiIdInvalidError,
    AccessTokenInvalidError,
    PhoneNumberInvalidError
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 16191322
API_HASH = 'e39a7372de11be12f437fa178882a089'
BOT_TOKEN = '7500048654:AAFLSz_pp4ZJC6O7GWIsfI4_mLRhixIMut8'
CONFIG_FILE = 'bot_config.json'

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
KEYWORDS = [
    r'fpv', r'–º–∞–≤–∏–∫\w*', r'–¥—Ä–æ–Ω\w*', r'–±–ø–ª–∞', r'mavic\w*', r'–∫–æ–ø—Ç–µ—Ä\w*'
]

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    return {
        'source_channel': 'kherson_non_drone',
        'destination_channel': 'khersonshotm',
        'admin_id': None,
        'is_active': True
    }

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

def format_message(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏ —Ñ—Ä–∞–∑—ã
    text = re.sub(r'@kherson_non_drone\s*$', '', text, flags=re.IGNORECASE)
    text = re.sub(r'[, ]*–ø–æ–≤—ñ–¥–æ–º–ª—è(—î|—é—Ç—å) (–û–í–ê|–æ—á–µ–≤–∏–¥—Ü—ñ)\.?', '', text, flags=re.IGNORECASE)
    text = re.sub(r'[, ]*–π–º–æ–≤—ñ—Ä–Ω–∞ (–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å|–∞—Ç–∞–∫–∞) [^,\.]+[,\.\s]*', '', text, flags=re.IGNORECASE)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–ø–æ–Ω–∏–º—ã
    text = re.sub(r'–£ –º—ñ–∫—Ä–æ—Ä–∞–π–æ–Ω—ñ –°—É—Ö–∞—Ä–Ω–µ', '–°—É—Ö–∞—Ä–∫–∞', text, flags=re.IGNORECASE)
    text = re.sub(r'–£ –º—ñ–∫—Ä–æ—Ä–∞–π–æ–Ω—ñ\s+', '', text, flags=re.IGNORECASE)
    text = re.sub(r'–£ —Ä–∞–π–æ–Ω—ñ\s+([^\-‚Äî,]+)', r'\1', text, flags=re.IGNORECASE)
    text = re.sub(r'–£ —Ä–∞–π–æ–Ω—ñ\s+', '', text, flags=re.IGNORECASE)
    text = re.sub(r'–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–æ–≥–æ –≤–æ–∫–∑–∞–ª—É', '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', text, flags=re.IGNORECASE)
    text = re.sub(r'\b–°—Ç–µ–ø–∞–Ω—ñ–≤–∫–∏\b', '–°—Ç–µ–ø–∞–Ω—ñ–≤–∫–∞', text, flags=re.IGNORECASE)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ç–∏—Ä–µ –∏ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[‚Äî‚Äì-]+', ' - ', text)
    text = re.sub(r'\s{2,}', ' ', text)
    text = text.strip(' -,\n')

    # –û—Å–æ–±—ã–µ —à–∞–±–ª–æ–Ω—ã
    if "Zala" in text:
        return '–ë–ø–õ–ê "Zala" –Ω–∞–¥ –•–µ—Ä—Å–æ–Ω–æ–º!'
    elif "–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞" in text or "–°—É–≤–æ—Ä–æ–≤–∞" in text:
        return '–≤—É–ª. –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞ (–°—É–≤–æ—Ä–æ–≤–∞) - –¥—Ä–æ–Ω!'
    elif "–ê–Ω—Ç–æ–Ω—ñ–≤—Å—å–∫–∏–π" in text:
        return '–ê–Ω—Ç–æ–Ω—ñ–≤—Å—å–∫–∏–π –∑–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π –º—ñ—Å—Ç - FPV!'

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    if any(re.search(kw, text, re.IGNORECASE) for kw in KEYWORDS):
        text = text.rstrip('!.?') + '!'
        return text

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    return f"{text} - –¥—Ä–æ–Ω!"

async def main():
    config = load_config()
    client = TelegramClient('kherson_bot_session', API_ID, API_HASH)
    
    async def start_monitoring():
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        try:
            source = await client.get_entity(config['source_channel'])
            dest = await client.get_entity(config['destination_channel'])
            
            @client.on(events.NewMessage(chats=source))
            async def handler(event):
                if not config['is_active']:
                    return
                
                text = event.message.message
                if not text or not any(re.search(kw, text, re.IGNORECASE) for kw in KEYWORDS):
                    return
                
                formatted = format_message(text)
                await client.send_message(dest, formatted, parse_mode='md')
            
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {source.title} -> {dest.title}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    @client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        config['admin_id'] = event.sender_id
        save_config(config)
        
        await event.reply(
            "ü§ñ –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/source [–∫–∞–Ω–∞–ª] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫\n"
            "/dest [–∫–∞–Ω–∞–ª] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª\n"
            "/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/on - –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/off - –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )

    @client.on(events.NewMessage(pattern='/source'))
    async def set_source(event):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if event.sender_id != config['admin_id']:
            return await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        args = event.message.text.split(maxsplit=1)
        if len(args) < 2:
            return await event.reply("–£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /source username")
        
        config['source_channel'] = args[1].strip()
        save_config(config)
        await start_monitoring()
        await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config['source_channel']}")

    @client.on(events.NewMessage(pattern='/dest'))
    async def set_destination(event):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if event.sender_id != config['admin_id']:
            return await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        args = event.message.text.split(maxsplit=1)
        if len(args) < 2:
            return await event.reply("–£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /dest username")
        
        config['destination_channel'] = args[1].strip()
        save_config(config)
        await event.reply(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config['destination_channel']}")

    @client.on(events.NewMessage(pattern='/status'))
    async def show_status(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if config['is_active'] else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
        await event.reply(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {config['source_channel']}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {config['destination_channel']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )

    @client.on(events.NewMessage(pattern='/on'))
    async def turn_on(event):
        """–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if event.sender_id != config['admin_id']:
            return await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        config['is_active'] = True
        save_config(config)
        await event.reply("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")

    @client.on(events.NewMessage(pattern='/off'))
    async def turn_off(event):
        """–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if event.sender_id != config['admin_id']:
            return await event.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        config['is_active'] = False
        save_config(config)
        await event.reply("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await client.start(bot_token=BOT_TOKEN)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if config.get('is_active', True):
        await start_monitoring()
    
    await client.run_until_disconnected()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")